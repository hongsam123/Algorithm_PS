package algorithm.boj.graph;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;

public class boj2151 {
    static char[][] board = new char[52][52];
    static boolean[][][][]mirror = new boolean[52][52][2502][6];
    static int[] dx = {1,0,-1,0};
    static int[] dy = {0,1,0,-1};
    static int[] prev = {2,3,0,1};
    static Queue<Pair> q = new LinkedList<>();
    static public class Pair {
        int x;
        int y;
        int dir;
        int cnt;
        public Pair(int x,int y,int dir,int cnt) {
            this.x = x;
            this.y = y;
            this.dir = dir;
            this.cnt = cnt;
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int n = Integer.parseInt(br.readLine());

        int dox = 0;
        int doy = 0;
        boolean flag = true;
        int mcnt = 0;

        for(int i=0;i<n;i++) {
            String str = br.readLine();
            for(int j=0;j<n;j++) {
                board[i][j] = str.charAt(j);
                if(board[i][j]=='#') {
                    if(flag){
                        for(int dir = 0;dir<4;dir++) {

                            int nx = i+dx[dir];
                            int ny = j+dy[dir];
                            if(nx<0||nx>=n||ny<0||ny>=n) continue;
                            q.add(new Pair(nx, ny, dir, 0));
                        }
                        flag = false;
                    }else {
                        dox = i;
                        doy = j;
                    }
                }
                if(board[i][j]=='!') mcnt++;
            }
        }

        int answer = 987654321;

        while(!q.isEmpty()) {
            Pair cur = q.poll();

            //System.out.println(cur.x +" "+cur.y+" "+cur.cnt);
            if(cur.x==dox && cur.y==doy){
                if(cur.cnt<answer){
                    answer = cur.cnt;
                    continue;
                }
            }

            //if(cur.x<0||cur.y<0||cur.x>=n||cur.y>=n) continue;
            if(board[cur.x][cur.y]=='*') continue;
            if(cur.cnt>answer) continue;
            //if(mirror[cur.x][cur.y][cur.cnt][cur.dir]) continue;
            //System.out.println("?");
            if(board[cur.x][cur.y]=='!') {
                for (int d = 0; d < 4; d++) {
                    int nx = cur.x + dx[d];
                    int ny = cur.y + dy[d];
                    if(nx<0||nx>=n||ny<0||ny>=n) continue;
                    if(d==prev[cur.dir]) continue;
                    if(d==cur.dir) {
                        if(mirror[nx][ny][cur.cnt][d]==false) {
                            mirror[nx][ny][cur.cnt][d] = true;
                            q.add(new Pair(nx,ny,d,cur.cnt));
                        }
                    }else {
                        if(mirror[nx][ny][cur.cnt+1][d]==false) {
                            mirror[nx][ny][cur.cnt+1][d] = true;
                            q.add(new Pair(nx,ny,d,cur.cnt+1));
                        }
                    }
                }
            }
            if(board[cur.x][cur.y]=='.') {
                int nx = cur.x+ dx[cur.dir];
                int ny = cur.y + dy[cur.dir];
                if(nx<0||nx>=n||ny<0||ny>=n) continue;
                if(mirror[nx][ny][cur.cnt][cur.dir]==false){
                    mirror[nx][ny][cur.cnt][cur.dir] = true;
                    q.add(new Pair(nx,ny,cur.dir,cur.cnt));
                }

            }
        }

        System.out.println(answer);
    }
}
